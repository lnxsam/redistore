// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "redistore/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetCardByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetCardByID(ctx context.Context, id string) (*domain.Card, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Card
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Card); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Card)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetProductByID(ctx context.Context, id string) (*domain.Product, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Product
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Product); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductList provides a mock function with given fields: ctx
func (_m *Repository) GetProductList(ctx context.Context) ([]domain.Product, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Product
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertCard provides a mock function with given fields: ctx, card
func (_m *Repository) InsertCard(ctx context.Context, card domain.Card) (*domain.Card, error) {
	ret := _m.Called(ctx, card)

	var r0 *domain.Card
	if rf, ok := ret.Get(0).(func(context.Context, domain.Card) *domain.Card); ok {
		r0 = rf(ctx, card)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Card)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Card) error); ok {
		r1 = rf(ctx, card)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertProduct provides a mock function with given fields: ctx, product
func (_m *Repository) InsertProduct(ctx context.Context, product domain.Product) (*domain.Product, error) {
	ret := _m.Called(ctx, product)

	var r0 *domain.Product
	if rf, ok := ret.Get(0).(func(context.Context, domain.Product) *domain.Product); ok {
		r0 = rf(ctx, product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Product) error); ok {
		r1 = rf(ctx, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchProductsByTitle provides a mock function with given fields: ctx, titleKeywords
func (_m *Repository) SearchProductsByTitle(ctx context.Context, titleKeywords string) ([]domain.Product, error) {
	ret := _m.Called(ctx, titleKeywords)

	var r0 []domain.Product
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Product); ok {
		r0 = rf(ctx, titleKeywords)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, titleKeywords)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCard provides a mock function with given fields: ctx, card
func (_m *Repository) UpdateCard(ctx context.Context, card domain.Card) error {
	ret := _m.Called(ctx, card)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Card) error); ok {
		r0 = rf(ctx, card)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
